{
  "description": "<section class=\"section1\"><h1>AUDIENCE</h1>\n<ul>\n<li>data scientists (current and aspiring)</li>\n<li>those who want to know more about data processing</li>\n<li>those who are intimidate by \"big data\" (java) frameworks and are interested in a simpler, pure python alternative</li>\n<li>those interested in async and/or parallel programming</li>\n</ul>\n</section><section class=\"section1\"><h1>DESCRIPTION</h1>\n<p>Big data processing is all the rage these days. Heavyweight frameworks such as Spark, Storm, Kafka, Samza, and Flink have taken the spotlight despite their complex setup, java dependency, and intense computer resource usage.</p>\n<p>Those interested in simple, pure python solutions have limited options. Most alternative software is synchronous, doesn't perform well on large data sets, or is poorly documented.</p>\n<p>This talk aims to explain stream processing and its uses, and introduce riko: a pure python stream processing library built with simplicity in mind. Complete with various examples, you\u2019ll get to see how riko lazily processes streams via its synchronous, asynchronous, and parallel processing APIs.</p>\n</section><section class=\"section1\"><h1>OBJECTIVES</h1>\n<p>Attendees will learn what streams are, how to process them, and the benefits of stream processing. They will also see that most data isn't \"big data\" and therefore doesn't require complex (java) systems (*<em>cough*</em> spark and storm *<em>cough*</em>) to process it.</p>\n</section><section class=\"section1\"><h1>DETAILED ABSTRACT</h1>\n<section class=\"section2\"><h2>Stream processing?</h2>\n<section class=\"section3\"><h3>What are streams?</h3>\n<p>A stream is a sequence of data. The sequence can be as simple as a list of integers or as complex as a generator of dictionaries.</p>\n</section><section class=\"section3\"><h3>How do you process streams?</h3>\n<p>Stream processing is the act of taking a data stream through a series of operations that apply a (usually pure) function to each element in the stream. These operations are pipelined so that the output of one function is the input of the next one. By using pure functions, the processing becomes embarrassingly parallel: you can split the items of the stream into separate processes (or threads) which then perform the operations simultaneously (without the need for communicating between processes/threads). [1-4]</p>\n</section><section class=\"section3\"><h3>What can stream processing do?</h3>\n<p>Stream processing allows you to efficiently manipulate large data sets. Through the use of lazy evaluation, you can process data stream too large to fit into memory all at once. </p>\n<p>Additionally, stream processing has several real world applications including:</p>\n<ul>\n<li>parsing rss feeds (rss readers, think <a href=\"http://feedly.com/\">feedly</a>)</li>\n<li>combining different types data from multiple sources in innovative ways (mashups, think <a href=\"http://trendsmap.com/\">trendsmap</a>)</li>\n<li>taking data from multiple sources, manipulating the data into a homogeneous structure, and storing the result in a database (extracting, transforming, and loading data; aka ETL, data wrangling...)</li>\n<li>aggregating similarly structured data from siloed sources and presenting it via a unified interface (aggregators, think <a href=\"kayak.com\">kayak</a>)</li>\n</ul>\n<p>[5, 6]</p>\n</section></section><section class=\"section2\"><h2>Stream processing frameworks</h2>\n<p>If you've heard anything about stream processing, chances are you've also heard about frameworks such as Spark, Storm, Kafka, Samza, and Flink. While popular,  these frameworks have a complex setup and installation process, and are usually overkill for the amount of data typical python users deal with. Using a few examples, I will show basic Storm usage and how it stacks up against BASH.</p>\n</section><section class=\"section2\"><h2>Introducing riko</h2>\n<p>Supporting both Python 2 and 3, riko is the first pure python stream processing library to support synchronous, asynchronous, and parallel processing. It's built using functional programming methodology and lazy evaluation by default. </p>\n<section class=\"section3\"><h3>Basic riko usage</h3>\n<p>Using a series of examples, I will show basic riko usage. Examples will include counting words, fetching streams, and rss feed manipulation. I will highlight the key features which make riko a better stream processing alternative to Storm and the like.</p>\n</section><section class=\"section3\"><h3>riko's many paradigms</h3>\n<p>Depending on the type of data being processed; a synchronous, asynchronous, or parallel processing method may be ideal. Fetching data from multiple sources is suited for asynchronous or thread based parallel processing. Computational intensive tasks are suited for processor based parallel processing. And asynchronous processing is best suited for debugging or low latency environments.</p>\n<p>riko is designed to support all of these paradigms using the same api. This means switching between paradigms requires trivial code changes such as adding a yield statement or changing a keyword argument.</p>\n<p>Using a series of examples, I will show each of these paradigms in action.</p>\n</section></section></section>",
  "duration": 1941,
  "recorded": "2016-10-06",
  "speakers": [
    "Reuben Cummings"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/oyM3CxtCjUQ/hqdefault.jpg",
  "title": "Stream processing made easy with riko",
  "videos": [
    {
      "type": "youtube",
      "url": "http://youtu.be/oyM3CxtCjUQ"
    }
  ]
}