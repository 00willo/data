{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Most of Python and R scientific packages incorporate compiled scientific libraries to speed up the execution of the code needed for high-performance computing and to reuse legacy libraries.\n\nSeveral semi-automatic solutions exist to wrap these compiled libraries: SWIG, Cython, Boost.Python.\nHowever, the process of wrapping a large C++ library is cumbersome and time consuming, mainly due some high-level constructs that have no equivalent in Python (template, complex iterators, ...).\n\nIn this talk, we introduce AutoWIG, a Python package that enables full C++ introspection using LLVM/Clang technologies.\nDefault strategies have been designed to transform any C++ construct into Python, using Boost.Python for instance.\nBased on the introspection, a set of classes, methods, namespaces are retrieve and Boost.Python code is generated using the Mako template engine.\n\nOur approach is automatic, extensible, and applies to complex C++ libraries, composed of thousands of classes or incorporating modern meta-programming constructs.\nFor instance, we wrap with AutoWIG the full Clang library to obtain full introspection on C++ code such as template classes.\n[Jupyter notebooks](http://autowig.readthedocs.io/en/latest/examples/index.html) and [Docker images](http://autowig.readthedocs.io/en/latest/install/docker.html) render AutoWIG easy to pick up and play with.\nThe source code is hosted on [GitHub](http://github.com/StatisKit/AutoWIG) and binaries can be [installed](http://autowig.readthedocs.io/en/latest/install/anaconda.html) with Conda.\nDesigned as a library, this package can easily be integrated with compiler toolchains, such as SCons, to ease the development process of teams.\nA more detailed description of this package can be read on this [preprint](https://arxiv.org/abs/1705.11000).\n\nDuring the talk, we will describe AutoWIG main features and cover how you can generate Python bindings for your C++ libraries illustrating by various Jupyter notebooks.\nIn particular, we will explain how we have bootstrapped the wrapping of LLVM/Clang in Python, using libclang, to provide unavailable features such as introspection on C++ templates from Python.\nAn example of the wrapping of C++  [linear algebra](http://eigen.tuxfamily.org) and  [statistical](http://github.com/StatisKit) libraries to benefit of state-of-the-art graphical model learning algorithms will be discussed in depth.",
  "duration": 700,
  "language": "eng",
  "recorded": "2017-08-31",
  "related_urls": [
    {
      "label": "schedule",
      "url": "https://www.euroscipy.org/2017/program.html"
    }
  ],
  "speakers": [
    "Pierre Fernique"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/N4q_Vud77Hw/maxresdefault.jpg",
  "title": "AutoWIG: Wrapping very large C++ libraries in Python automatically",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=N4q_Vud77Hw"
    }
  ]
}
