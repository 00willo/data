{"whiteboard": "", "video_mp4_download_only": false, "video_webm_download_only": false, "duration": null, "video_ogv_download_only": false, "category": "Kiwi PyCon 2013", "speakers": ["Craig de Stigter"], "title": "Intro to Metaclasses", "quality_notes": "", "video_flv_length": null, "recorded": "2013-09-16", "video_mp4_length": null, "description": "@ Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 2\r\n\r\n**Audience level**\r\n\r\nIntermediate\r\n\r\n**Abstract**\r\n\r\nPython's Metaclasses are an \"advanced\" technique, but once you get started they're surprisingly approachable.\r\n\r\nStarting with the basics, we'll:\r\n\r\n* figure out what a metaclass does\r\n* point out some existing metaclasses you might already have used\r\n* see where you might use one in your own code.\r\n\r\nWe'll compare use of a metaclass with some alternatives that don't use metaclasses, to better understand why you'd want to use them.\r\n\r\nThen we'll take a look at a couple of use-cases where using a metaclass helps us achieve a much more friendly and intuitive API than we otherwise could.\r\n\r\n**Slides**\r\n\r\nhttps://speakerdeck.com/nzpug/craig-de-stigter-intro-to-metaclasses", "video_mp4_url": "", "tags": [], "copyright_text": "", "related_urls": [], "video_flv_download_only": false, "source_url": "http://www.youtube.com/watch?v=OCDbLcCB-uA", "video_webm_url": "", "video_ogv_length": null, "video_ogv_url": "", "language": "English", "video_webm_length": null, "summary": "Metaprogramming is a valuable technique for putting complexity where it belongs: behind a clean, friendly API. This talk goes over the basics of metaclasses and introspection in Python, and covers how and when you should use them to make your code more approachable.\r\n", "thumbnail_url": "http://i1.ytimg.com/vi/OCDbLcCB-uA/hqdefault.jpg", "video_flv_url": ""}