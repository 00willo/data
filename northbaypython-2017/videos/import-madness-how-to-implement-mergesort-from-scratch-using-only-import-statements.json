{
  "description": "George London\n\nhttps://2017.northbaypython.org/schedule/presentation/15/\n\nRecently I had trouble importing a module. So I started actually reading the documentation of the Python import system and realized that I had been writing Python for years without understanding basics like \u201ca module is a file\u201d or \u201cimporting a module executes it\u201d.\r\n\r\nA few days later I had a terrible realization \u2013 it\u2019s possible to implement a mergesort algorithm in Python using only the import statement.\r\n\r\nActually making it work requires learning (and subverting) almost all of the import system\u2019s underlying machinery. So walking through how it\u2019s done creates an excellent (and entertaining) opportunity to shine some light on the darker corners of a system that Python programmers use nearly every day but can work for years without ever really understanding.\r\n\r\nThis talk starts off with an explanation of the basic fundamentals of the import system, i.e.\r\n\r\n1) What does the word \u201cmodule\u201d actually mean? \r\n2) How does Python find the source code I\u2019m importing? \r\n3) What is Python actually doing when I import code? How is it different from compiled languages?\r\n4) How Python uses namespaces to manage scope and keep our functions and variables organized!\r\n\r\nFrom there, things get pretty weird.\r\n\r\nThe rest of the talk explains how the import system alone gives us the tools to emulate function evaluation and how that means that we can (but shouldn\u2019t!) write algorithms using import statements instead of functions.\r\n\r\nI describe the classic mergesort algorithm and then I show how to actually implement it using imports (under the theory that nothing helps retain knowledge like watching it applied to a trainwreck.)\r\n\r\nI briefly discuss how \u201ccomputation\u201d is an abstract process that can be accomplished in more ways that we might intuitively realize. And then I wrap up with some practical advice on how users can avoid ImportErrors and a warning about the serious but non-obvious security risks of importing Python code.\n\nAbout North Bay Python\r\n\r\nA single-track conference north of the Golden Gate, focused on community, collaboration, and all things Python.\r\n\r\nNorth Bay Python is a two-day, single-track Python conference held at the Mystic Theatre in Historic Downtown Petaluma, California, over the weekend of December 2 & 3, 2017.\r\n\r\nWe're a nonprofit conference for professionals, enthusiasts and students alike. We're focused on inclusion, accessibility, diversity, and affordability. Most importantly, we're planning a great lineup of talks from all over the Python ecosystem, with plenty of time to meet new people and develop new ideas.\r\n\r\nOur venue, the Mystic Theatre in Downtown Petaluma, is a beautiful example of an early 1900s Vaudeville theatre. You can find over 50 different food and drink options a short walk away, and the nearest hotel is only a block away.\n\nA Python conference north of the Golden Gate\r\n\r\n\r\nNorth Bay Python is a single-track conference with a carefully curated set of talks representing the diverse Python community and their different areas of interest.\r\n\r\nIf a topic is less to your interest, or you've met some people you really want to sit down and chat with, we'll have plenty of areas away from the main theatre to catch up and chat.\r\n\r\nOur goal is to keep prices as low as possible. That means we won't be catering lunch. Instead, you can look forward to extra-long lunch breaks you can use to explore all of the great food options around the venue.",
  "recorded": "2017-12-03",
  "speakers": ["George London"],
  "thumbnail_url": "https://i.ytimg.com/vi/7wPcR3OWSU8/hqdefault.jpg",
  "title": "import madness # how to implement mergesort from scratch using only import statements",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=7wPcR3OWSU8"
    }
  ]
}
