{"whiteboard": "needs editing", "video_mp4_download_only": false, "video_webm_download_only": false, "duration": null, "video_ogv_download_only": false, "category": "DjangoCon 2012", "speakers": ["Joshua Ginsberg"], "title": "Accelerating and Enhancing Django with Redis", "quality_notes": "", "video_flv_length": null, "recorded": "2012-09-06", "video_mp4_length": null, "description": "Getting your Django app to a v1.0 release means focusing on function and user\nexperience before prematurely focusing on optimization. But once it's off the\nground, the Redis key-object store provides a versatile and functional way to\ntake your app to the next level of performance and function with minimal\nengineering.\n\n[Redis](http://redis.io) is an in-memory key-object database that can perform\nstandard operations on simple values, lists, sets, hash maps, and scored sets\nwith incredible efficiency. While it cannot and should not replace SQL for\nschema-defined, persistent data storage, it can provide dramatically faster\noperational efficiency for volatile, temporary, or rapidly changing data with\nminimal coding required.\n\nThis talk begins by introducing Redis, its basic featureset, and the data\ntypes and operations it supports. We'll cover some high-level guidelines and\nstrategies for identifying where Redis may be an appropriate performance-\nenhancing solution. We then cover the out-of-the-box ways that Redis can\nimprove a Django application as a cache, session store, Celery broker, and\nmore. We'll then proceed to more advanced usage possibilities, implementing a\nreal-time websocket based messaging solution, scripting within Redis using its\nembedded Lua interpreter, and connecting Redis to PostgreSQL using Foreign\nData Wrappers to efficiently blend SQL tables with Redis data.\n\nBy the end of the presentation, you should be able to use all of the data-\nstructures offered by Redis, to identify opportunities within you codebase\nthat Redis may offer simple but dramatic efficiency improvements, and to\nenvision how advanced Redis usage may bring new and cutting-edge functionality\nto your project.\n\nRedis was developed by [Salvatore Sanfilippo](http://twitter.com/antirez) and\n[Pieter Noordhuis](http://twitter.com/pnoordhuis), who are both supported by\nVMWare to develop the database full-time. Redis has excellent [Python\nbindings](https://github.com/andymccurdy/redis-py/) developed by Andy McCurdy.\n\n", "video_mp4_url": null, "tags": ["django", "redis"], "copyright_text": "Creative Commons Attribution license (reuse allowed", "related_urls": [], "video_flv_download_only": false, "source_url": "http://www.youtube.com/watch?v=xbWBIudWRxQ", "video_webm_url": null, "video_ogv_length": null, "video_ogv_url": null, "language": "English", "video_webm_length": null, "summary": "This tutorial introduces Redis, an in-memory key-object NoSQL datastore. We\ndiscuss out-of-the-box ways Redis can help improve the performance of your\nDjango deployments, ways that using Redis instead of SQL for some data\nmanagement can accelerate your apps, and more advanced and unconventional uses\nfor Redis to solve real-time and big-data problems.\n\n", "thumbnail_url": "http://i.ytimg.com/vi/xbWBIudWRxQ/hqdefault.jpg", "video_flv_url": null}