{"whiteboard": "", "video_mp4_download_only": true, "video_webm_download_only": false, "duration": 60, "video_ogv_download_only": false, "category": "PyCon DE 2013", "speakers": ["Felix Huber"], "title": "High-Level Programmierung in der Raumfahrt", "quality_notes": "", "video_flv_length": null, "recorded": "2013-10-17", "video_mp4_length": null, "description": "", "video_mp4_url": "", "tags": [], "copyright_text": "", "related_urls": [], "video_flv_download_only": false, "source_url": "https://www.youtube.com/watch?v=2w7K5wUL9IE", "video_webm_url": null, "video_ogv_length": null, "video_ogv_url": null, "language": "German", "video_webm_length": null, "summary": "Field Programmable Gate Arrays (FPGA) werden normalerweise auf Registerebene programmiert mit Hardwarebeschreibungssprachen wie Verilog oder VHDL. Dies ist vergleichbar mit Assemblerprogrammierung eines Mikroprozessors. Die Sprache Handel-C (sic!) hat sich zum Ziel gemacht, Hardwarebeschreibung mit C-Syntax zu erm\u00f6glichen, unabh\u00e4ngig von der zu Grunde liegenden Hardware. Dazu mu\u00df das Problem die Synchronizit\u00e4t durch die inh\u00e4rente Parallelit\u00e4t einer Hardwarefunktion gel\u00f6st werden. Mit Handel-C ist es nun m\u00f6glich, einen Algorithmus in C zu schreiben, auf einem Rechner zu simulieren und anschlie\u00dfend aus dem identischen Quellcode eine Hardwareimplementierung zu synthetisieren. Dabei gehen die Vorteile einer Hochsprache nicht verloren, im Gegenteil: durch den global optimierenden Compiler werden weniger Ressourcen auf dem FPGA ben\u00f6tigt. Zusammen mit Bibliotheken f\u00fcr Fest- und Flie\u00dfkommaarithmetik, Graphikausgabe und Tastatur bedient sich ein FPGA dann wie ein embedded Prozessor mit einem Geschwindigkeitszuwachs von Faktor 100.", "thumbnail_url": "http://i1.ytimg.com/vi/2w7K5wUL9IE/hqdefault.jpg", "video_flv_url": null}