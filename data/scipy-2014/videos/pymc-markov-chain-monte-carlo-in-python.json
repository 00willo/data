{
  "id": 2734, 
  "category": "SciPy 2014", 
  "slug": "pymc-markov-chain-monte-carlo-in-python", 
  "title": "PyMC: Markov Chain Monte Carlo in Python", 
  "summary": "PyMC is a Python module that implements Bayesian statistical models and fitting algorithms, including Markov chain Monte Carlo (MCMC). Its flexibility, extensibility, and clean interface make it applicable to a large suite of statistical modeling applications. The upcoming release of PyMC 3 features an expanded set of MCMC samplers, including Hamiltonian Monte Carlo.", 
  "description": "[PyMC](http://pymc-devs.github.io/pymc/) is a Python module that implements Bayesian statistical models and fitting algorithms, including Markov chain Monte Carlo (MCMC). Its flexibility and extensibility make it applicable to a large suite of problems. Along with core sampling functionality, PyMC includes methods for summarizing output, plotting, goodness-of-fit and convergence diagnostics. PyMC seeks to make Bayesian analysis as painless as possible, so that it may be used by a range of data analysts. Its key features include:\r\n\r\n* Fits Bayesian statistical models with Markov chain Monte Carlo and other algorithms.\r\n* Includes a large suite of well-documented statistical distributions.\r\n* Uses NumPy for numerics wherever possible.\r\n* Includes a module for modeling Gaussian processes.\r\n* Sampling loops can be paused and tuned manually, or saved and restarted later.\r\n* Creates summaries including tables and plots.\r\n* Traces can be saved to the disk as plain text, Python pickles, SQLite or MySQL database, or hdf5 archives.\r\n* Several convergence diagnostics are available.\r\n* Extensible: easily incorporates custom step methods and unusual probability distributions.\r\n* MCMC loops can be embedded in larger programs, and results can be analyzed with the full power of Python.\r\n\r\nThe upcoming release of [PyMC 3](https://github.com/pymc-devs/pymc) features an expanded set of MCMC samplers, including Hamiltonian Monte Carlo. For this, we tap into the power of Theano to provide automatic evaluation of mathematical expressions, including gradients used by modern MCMC samplers.\r\n\r\nThe [source](https://github.com/pymc-devs/pymc) and [documentation](http://pymc-devs.github.io/pymc/) for PyMC can be found on GitHub.", 
  "quality_notes": "", 
  "language": "English", 
  "copyright_text": "http://www.youtube.com/t/terms", 
  "thumbnail_url": "http://i1.ytimg.com/vi/XbxIo7ScVzc/hqdefault.jpg", 
  "duration": null, 
  "videos": [
    {
      "url": "http://www.youtube.com/watch?v=XbxIo7ScVzc", 
      "length": 0, 
      "type": "youtube"
    }
  ], 
  "source_url": "http://www.youtube.com/watch?v=XbxIo7ScVzc", 
  "tags": [
    "markov", 
    "monte carlo"
  ], 
  "speakers": [
    "Chris Fonnesbeck"
  ], 
  "recorded": "2014-07-09"
}