{
  "id": 2720, 
  "category": "SciPy 2014", 
  "slug": "the-failure-of-python-object-serializations-why", 
  "title": "The Failure of Python Object Serializations: Why HPC in Python is Broken and How to Fix it", 
  "summary": "Parallel and asynchronous computing in python is crippled by pickle's poor object serialization. Dill, a more robust serialization package, strives to serialize all of python.  Dill has been used to enable state persistence and recovery, global caching, and the coordination of distributed parallel calculations across a network of the world's largest computers.", 
  "description": "Parallel and asynchronous computing in python is crippled by pickle's poor object serialization. However, a more robust serialization package would drastically improve the situation. To leverage the cores found in modern processors we need to communicate functions between different processes -- and that means callables must be serialized without pickle barfing.  Similarly, parallel and distributed computing with MPI, GPUs, sockets, and across other process boundaries all need serialized functions (or other callables).  So why is pickling in python so broken?  Python's ability to leverage these awesome communication technologies is limited by python's own inability to be a fully serializable language.  In actuality, serialization in python is quite limited, and for really no good reason.\r\n\r\nMany raise security concerns for full object serialization, however it can be argued that it is not pickle's responsibility to do proper authentication. In fact, one could apply rather insecure serialization of all objects the objects were all sent across RSA-encrypted ssh-tunnels, for example. \r\n\r\nDill is a serialization package that strives to serialize all of python.  We have forked python's multiprocessing to use dill. Dill can also be leveraged by mpi4py, ipython, and other parallel or distributed python packages. Dill serves as the backbone for a distributed parallel computing framework that is being used to design the next generation of large-scale heterogeneous computing platforms, and has been leveraged in large-scale calculations of risk and uncertainty.  Dill has been used to enable state persistence and recovery, global caching, and the coordination of distributed parallel calculations across a network of the world's largest computers.\r\n\r\n\r\n[http://pythonhosted.org/dill](http://pythonhosted.org/dill \"\")\r\n\r\n[https://github.com/uqfoundation](https://github.com/uqfoundation \"\")\r\n\r\n[http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/](http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/ \"\")\r\n\r\n[http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1](http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1 \"\")\r\n\r\n[https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY](https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY \"\")\r\n\r\n[http://nbviewer.ipython.org/gist/anonymous/5241793](http://nbviewer.ipython.org/gist/anonymous/5241793 \"\")", 
  "quality_notes": "", 
  "language": "English", 
  "copyright_text": "http://www.youtube.com/t/terms", 
  "thumbnail_url": "http://i1.ytimg.com/vi/oSoT0m8SgrU/hqdefault.jpg", 
  "duration": null, 
  "videos": [
    {
      "url": "http://www.youtube.com/watch?v=oSoT0m8SgrU", 
      "length": 0, 
      "type": "youtube"
    }
  ], 
  "source_url": "http://www.youtube.com/watch?v=oSoT0m8SgrU", 
  "tags": [], 
  "speakers": [
    "Michael McKerns"
  ], 
  "recorded": "2014-07-09"
}