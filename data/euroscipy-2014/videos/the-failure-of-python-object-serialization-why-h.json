{
  "id": 3333, 
  "category": "EuroScipy 2014", 
  "slug": "the-failure-of-python-object-serialization-why-h", 
  "title": "The failure of python object serialization: why HPC in python is broken, and how to fix it", 
  "summary": "", 
  "description": "Parallel and asynchronous computing in python is crippled by pickle's poor\r\nobject serialization. However, a more robust serialization package would\r\ndrastically improve the situation. To leverage the cores found in modern\r\nprocessors we need to communicate functions between different processes --\r\nand that means callables must be serialized without pickle barfing.\r\nSimilarly, parallel and distributed computing with MPI, GPUs, sockets, and\r\nacross other process boundaries all need serialized functions (or other\r\ncallables). So why is pickling in python so broken? Python's ability to\r\nleverage these awesome communication technologies is limited by python's own\r\ninability to be a fully serializable language. In actuality, serialization\r\nin python is quite limited, and for really no good reason.\r\n\r\nMany raise security concerns for full object serialization, however it can\r\nbe argued that it is not pickle's responsibility to do proper\r\nauthentication. In fact, one could apply rather insecure serialization of\r\nall objects the objects were all sent across RSA-encrypted ssh-tunnels, for\r\nexample.\r\n\r\nDill is a serialization package that strives to serialize all of python. We\r\nhave forked python's multiprocessing to use dill. Dill can also be leveraged\r\nby mpi4py, ipython, and other parallel or distributed python packages. Dill\r\nserves as the backbone for a distributed parallel computing framework that\r\nis being used to design the next generation of large-scale heterogeneous\r\ncomputing platforms, and has been leveraged in large-scale calculations of\r\nrisk and uncertainty. Dill has been used to enable state persistence and\r\nrecovery, global caching, and the coordination of distributed parallel\r\ncalculations across a network of the world's largest computers.\r\n\r\nhttp://pythonhosted.org/dill\r\n\r\nhttps://github.com/uqfoundation\r\n\r\nhttp://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/\r\n\r\nhttp://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1\r\n\r\nhttps://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY\r\n\r\nhttp://nbviewer.ipython.org/gist/anonymous/5241793\r\n\r\n", 
  "quality_notes": "", 
  "language": "English", 
  "copyright_text": "youtube", 
  "thumbnail_url": "https://i.ytimg.com/vi/QvJmryCRfeY/hqdefault.jpg", 
  "duration": null, 
  "videos": [
    {
      "url": "https://www.youtube.com/watch?v=QvJmryCRfeY", 
      "length": 0, 
      "type": "youtube"
    }
  ], 
  "source_url": "https://www.youtube.com/watch?v=QvJmryCRfeY", 
  "tags": [], 
  "speakers": [
    "Michael McKerns"
  ], 
  "recorded": "2014-10-22"
}