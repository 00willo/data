{"whiteboard": "", "video_mp4_download_only": false, "video_webm_download_only": false, "duration": 1538, "video_ogv_download_only": false, "category": "PyCon Italia 2015", "speakers": ["Alex Martelli"], "title": "Modern Python Patterns and Idioms", "quality_notes": "", "video_flv_length": null, "recorded": "2015-06-09", "video_mp4_length": null, "description": "Python itself has grown to encompass some classic idioms, such as Decorate-Sort-Undecorate, AKA DSU, begetting the widespread key= argument to most functions related to ordering \u2013 but not quite all of them: heapq, for example, still mostly lacks key= \u2013 so, we also show what idioms to use with this and similar modules.\r\n\r\nLists have long been one of Python\u2019s strengths, and they\u2019re of course still precious \u2013 but many kinds of specialized containers have emerged, and it\u2019s important to know how to choose among them, and when and how to roll your own. More important still, iterators have grown into prominence, and very often they\u2019ll be the best choice \u2013 and they come with a large set of relevant patterns and idioms.\r\n\r\nThe tectonic shift that\u2019s taking us from classic to modern Python goes even deeper \u2013 even the dominance of good old duck typing is threatened! Specifically, in many cases, we use, instead, goose typing \u2013 checking against an abstract base class \u2013 and, as type annotations slowly emerge, they reinforce this general tendency.\r\n\r\nThese, and a miscellanea of smaller patterns and idioms (concerning I/O, best uses of dicts and other specialized mappings, async operations, testing, \u2026), are fast becoming indispensable parts of the Proficient Pythonista\u2019s repertoire.", "video_mp4_url": "", "tags": [], "copyright_text": "", "related_urls": [], "video_flv_download_only": false, "source_url": "https://www.youtube.com/watch?v=LeuChRCByZc", "video_webm_url": "", "video_ogv_length": null, "video_ogv_url": "", "language": "English", "video_webm_length": null, "summary": "As Python grows, the problem spaces we address keep shifting, and best practices for software development mature, so does the set of best-of-breed patterns and idioms change: some classics fading, new stars emerging. This talk helps fill the gap between yesterday\u2019s good old Python, and tomorrow\u2019s glittering vistas.", "thumbnail_url": "https://i.ytimg.com/vi/LeuChRCByZc/maxresdefault.jpg", "video_flv_url": ""}