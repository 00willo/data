description: |-
  This session is about using native code with Python to ensure computationally intensive programs execute as fast as is possible.

  Full details — http://london.pydata.org/schedule/presentation/48/
duration: 2513
recorded: '2015-06-20'
speakers:
- Russel Winder
thumbnail_url: https://i.ytimg.com/vi/T138eQjEASs/hqdefault.jpg
title: Making Computations Execute Very Quickly
videos:
- type: youtube
  url: https://www.youtube.com/watch?v=T138eQjEASs
description_original: |
  This session is about using native code with Python to ensure
  computationally intensive programs execute as fast as is possible.
abstract_original: |
  Python is well known as a language that does not execute computationally
  intensive programs quickly. Traditionally, Cython and/or NumPy have been
  the tools to speed things up. There is interest in Numba as a new way
  forward. However C++14, D, Chapel, and possibly Rust, maybe Go, are
  there, are much easier to work with than you might think, and lead to
  very high performance and easily maintained code.

  In this session we will look at a couple of example codes to provide
  signposts as to how we can take a more polyglot approach to the
  construction of computationally intensive systems.
language: eng

